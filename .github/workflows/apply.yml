name: Apply
on:
  workflow_dispatch:
    inputs:
      target_region:
        description: 'Deploy target region'
        required: true
        default: 'us-west-2'
      s3_region:
        description: 'Backend S3 region'
        required: true
        default: 'us-west-2'
      s3_key:
        description: 'Backend S3 key'
        required: true
        default: 'tfstate/terraform.tfstate'
      instance_type:
        description: 'Deploy instance type'
        required: true
        default: 'g4dn.xlarge'
      ami_id:
        description: 'Deploy AMI ID'
        required: true
        default: 'ami-01126ee2e34c5f04e'
      key_pair_name:
        description: 'EC2 key pair name'
        required: true
        default: 'vaik_single_az_ec2_iac'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.target_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.2
          terraform_wrapper: false

      - name: Deploy Terraform
        working-directory: terraform
        id: apply_terraform
        run: |
          terraform init -backend-config='bucket=${{ secrets.S3_BUCKET_NAME }}' \
          -backend-config='key=${{ github.event.inputs.s3_key }}' \
          -backend-config='region=${{ github.event.inputs.s3_region }}'
          
          terraform plan -var='target_region=${{ github.event.inputs.target_region }}' \
          -var='key_name=${{ github.event.inputs.key_pair_name }}' \
          -var='ingress_ip=${{ secrets.Local_IP_Address }}' \
          -var='instance_type=${{ github.event.inputs.instance_type }}' \
          -var='ami_id=${{ github.event.inputs.ami_id }}'
          
          terraform apply -var='target_region=${{ github.event.inputs.target_region }}' \
          -var='key_name=${{ github.event.inputs.key_pair_name }}' \
          -var='ingress_ip=${{ secrets.Local_IP_Address }}' \
          -var='instance_type=${{ github.event.inputs.instance_type }}' \
          -var='ami_id=${{ github.event.inputs.ami_id }}' -auto-approve

      - name: Output markdown
        working-directory: terraform
        run: |
          EIP=` terraform output | grep -Eo 'ec2_eip\s*=\s*.*' `
          EIP_LIST=(${EIP//\"/ })
          EIP=${EIP_LIST[2]}
          echo '### Login' >> $GITHUB_STEP_SUMMARY
          echo '```ssh -i ~/.ssh/${{ github.event.inputs.key_pair_name }}.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@'${EIP}'```' >> $GITHUB_STEP_SUMMARY